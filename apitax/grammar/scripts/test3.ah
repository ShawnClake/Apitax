7 + 3 * (10 / (12 / (3 + 1) - 1));

7 + 3 * (10 / (12 / (3 + 1) - 1)) / (2 + 3) - 5 - 3 + (8);

(10 / (12 / (3 + 1) - 1));

(2 + 3) ;

3*(10 / (12 / (3 + 1) - 1));

3 / 5 * 2;

5 - 2.2;

3/5*(10 / (12 / (3 + 1) - 1));

7 + (((3 + 2)));

5 * 6 * 3 * 2;

36 / 6 / 2 / 3;

5 + 2 + 3 + 4;

5 - 2 - 3 - 5;



name "bobbyjoe";

name "keystones";

set keystone = "http://172.25.190.14:5000/v3";

set shawn = 65;

set derp = "thederpiest";



name derp;

{{ keystone }};

//{{simble.jim}};

//{{simble.lionking.shawn}};

//{{r:simble.lionking.1.role_assignments.0.user.id}};


//{{bobby.projects.0.is_domain}};


set mynum = 3;

1 + 1 + {{mynum}};

name derp;


set jimmy = {{mynum}} + 3;

set somestring = "heck no: " + {{derp}} + " :( " + derp;

set come.on = "noway";

set come.here = dict('{"myname": "is not cool", "youknow" : "?"}');

log({{derp}} + " " + somestring + " ===> " + come);

set ksjhdg = '{"myname": "is not cool", "youknow" : "?"}';

set something = dict(ksjhdg);

set heck.no = dict(mynum);

set cough = '["test0", "test1", "test2"]';

set heck.yes = dict(cough);

{{heck.yes.1}};

set me = "blah blah blah {{heck.yes.1}}";

export me;


//import ct("script apitax/grammar/scripts/test2.ah");


//set amanda = {{test2apitaxtest.test4apitaxtest.nooby}} + " or maybe jk";

//log(amanda);

log("this executed properly, i think");



-1;


-10;

5 + - 3;

5 + (-3);

5 + - ( - 3);

5 != 2;

!true;

!false;

!!!!(5 != 2);

120 == 120;

120 == 120.000000000;

120 == 120.000000001;

120 < 120.000000001;

120 < 120.000000000;

120 <= 120.00000001;

true and false;

true and true;

false and false;

false and true;

true or true;

false or false;

false or true;

true or false;

5 + 5 == 13 - 3;

"hello" == "hello";

"hello" == "helloo";

"hello" > "helloo";

"hello" < "helloo";

smack = "what";

log(smack);




mynum = mynum + 2;

log(5 + 3 + 2 + mynum);

mynum = 1;


if(5+5 == 13 - 3) 
{

	log('we are in this block');
	while(mynum < -1)
{
log('my num is now: ' + mynum);
mynum = mynum + 1;
}
	if(false){
	
			log('this is a nested block');
	} else if (true) {
		log('this is the first else if');
		if(true) {
		log('this is the third if');
		} else {
		log('this is the third else');
		}
	} else {
		log('this is the first else');
	}
} else {

log('this is the second else');

}


somelist = '["first", "second", "third"]';

for index in somelist
{
log('The list item is: ' + index);
}


anothernum = 5;

for index in anothernum
{
log('The list item is: ' + str(index));
}


anothernum++;
anothernum++;
anothernum--;

anothernum -= 1;
anothernum *= 6;
anothernum /= 5;
anothernum += 4;

log(str(anothernum));


log('This is demonstrating an implicit cast to string: ' + int(anothernum));

log(anothernum);


testlist = ["one", "two", ["a","b",'c'], "three"];

testlist.2.3 = "d";

log(testlist);

log(testlist.2.1);


testdict = {"first": "value1", "second": int(50), 
"third": ["one","two",
"three"]};

testdict.test = "Testing value";

log(testdict.third.0);

log(testdict.test);

testlist.4 = "Hello";
testlist.1 = "This is Fake News";

log(testlist);





