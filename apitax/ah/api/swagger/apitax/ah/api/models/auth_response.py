# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from apitax.ah.api.models.base_model_ import Model
from apitax.ah.api.models.user_auth import UserAuth  # noqa: F401,E501
from apitax.ah.api import util


class AuthResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, status=None, message=None, access_token=None, refresh_token=None, auth=None):  # noqa: E501
        """AuthResponse - a model defined in Swagger

        :param status: The status of this AuthResponse.  # noqa: E501
        :type status: int
        :param message: The message of this AuthResponse.  # noqa: E501
        :type message: str
        :param access_token: The access_token of this AuthResponse.  # noqa: E501
        :type access_token: str
        :param refresh_token: The refresh_token of this AuthResponse.  # noqa: E501
        :type refresh_token: str
        :param auth: The auth of this AuthResponse.  # noqa: E501
        :type auth: UserAuth
        """
        self.swagger_types = {
            'status': int,
            'message': str,
            'access_token': str,
            'refresh_token': str,
            'auth': UserAuth
        }

        self.attribute_map = {
            'status': 'status',
            'message': 'message',
            'access_token': 'access_token',
            'refresh_token': 'refresh_token',
            'auth': 'auth'
        }

        self._status = status
        self._message = message
        self._access_token = access_token
        self._refresh_token = refresh_token
        self._auth = auth

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AuthResponse of this AuthResponse.  # noqa: E501
        :rtype: AuthResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this AuthResponse.


        :return: The status of this AuthResponse.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AuthResponse.


        :param status: The status of this AuthResponse.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def message(self):
        """Gets the message of this AuthResponse.


        :return: The message of this AuthResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AuthResponse.


        :param message: The message of this AuthResponse.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def access_token(self):
        """Gets the access_token of this AuthResponse.


        :return: The access_token of this AuthResponse.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this AuthResponse.


        :param access_token: The access_token of this AuthResponse.
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def refresh_token(self):
        """Gets the refresh_token of this AuthResponse.


        :return: The refresh_token of this AuthResponse.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this AuthResponse.


        :param refresh_token: The refresh_token of this AuthResponse.
        :type refresh_token: str
        """

        self._refresh_token = refresh_token

    @property
    def auth(self):
        """Gets the auth of this AuthResponse.


        :return: The auth of this AuthResponse.
        :rtype: UserAuth
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this AuthResponse.


        :param auth: The auth of this AuthResponse.
        :type auth: UserAuth
        """

        self._auth = auth
